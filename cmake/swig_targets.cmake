set(${CMAKE_PROJECT_NAME}_LUA_SWIG_ENABLED_BY_DEFAULT ON)
set(${CMAKE_PROJECT_NAME}_LUA_SWIG ${${CMAKE_PROJECT_NAME}_LUA_SWIG_ENABLED_BY_DEFAULT} CACHE BOOL "Build the swig module for ${CMAKE_PROJECT_NAME}")

list(APPEND CMAKE_MODULE_PATH "${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/cmake")

macro(LUA_BULLET_SWIG)
  set(CMAKE_SWIG_FLAGS "")

  file(GLOB_RECURSE LUA_SWIG_SOURCE_FILES
    ${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/swig.in/script/thirdparty/bullet3/*.swg
    "${CMAKE_BINARY_DIR}/${BULLET_INCLUDE_DIRECTORY}" 
    )

  list(APPEND LUA_SWIG_SOURCE_FILES
    "${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/swig.in/script/thirdparty/bullet3/bullet3.i" 
  )

  SUBDIRLIST(SUBDIRS "${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/swig.in/script/thirdparty/bullet3" SWIGIN_SCRIPTS_INCLUDE_DIRECTORY_LIST)

  set(${CMAKE_PROJECT_NAME}_LUA_SWIG_FLAGS "-includeall")
  list(APPEND ${CMAKE_PROJECT_NAME}_LUA_SWIG_FLAGS "-fcompact")
  list(APPEND ${CMAKE_PROJECT_NAME}_LUA_SWIG_FLAGS "-fvirtual")
  list(APPEND ${CMAKE_PROJECT_NAME}_LUA_SWIG_FLAGS "-v")
  list(APPEND ${CMAKE_PROJECT_NAME}_LUA_SWIG_FLAGS "-w201")
  list(APPEND ${CMAKE_PROJECT_NAME}_LUA_SWIG_FLAGS "-w312")
  list(APPEND ${CMAKE_PROJECT_NAME}_LUA_SWIG_FLAGS "-ignoremissing")
  # list(APPEND ${CMAKE_PROJECT_NAME}_LUA_SWIG_FLAGS "-cpperraswarn")
  list(APPEND ${CMAKE_PROJECT_NAME}_LUA_SWIG_FLAGS "-DBT_INFINITY")
  list(APPEND ${CMAKE_PROJECT_NAME}_LUA_SWIG_FLAGS "-DSWIG_TYPE_TABLE=myprojectname")

  foreach(_SWIG_SOURCE_FILE ${LUA_SWIG_SOURCE_FILES})
    set_property(SOURCE ${_SWIG_SOURCE_FILE} PROPERTY SWIG_FLAGS ${${CMAKE_PROJECT_NAME}_LUA_SWIG_FLAGS})
    set_property(SOURCE ${_SWIG_SOURCE_FILE} PROPERTY CPLUSPLUS ON)
    set_property(SOURCE ${_SWIG_SOURCE_FILE} PROPERTY SWIG_INCLUDE_DIRECTORIES "${SWIGIN_SCRIPTS_INCLUDE_DIRECTORY_LIST}")
  endforeach()


  include_directories("${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/swig.in/script/njlic" 
    ${SWIGIN_SCRIPTS_INCLUDE_DIRECTORY_LIST} 
    "${CMAKE_BINARY_DIR}/${BULLET_INCLUDE_DIRECTORY}" 
    ${BULLET_INCLUDE_DIRECTORY_LIST}
    )

  get_property(_INCLUDE_DIRECTORIES DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY INCLUDE_DIRECTORIES)
  foreach(_INCLUDE_DIRECTORY ${_INCLUDE_DIRECTORIES})
    MESSAGE(STATUS "BULLET_SWIG_INCLUDE_DIRECTORY ${_INCLUDE_DIRECTORY}")
  endforeach()

  list(APPEND ${CMAKE_PROJECT_NAME}_DEFINITIONS NJLIC_SWIG=1 BT_INFINITY)
  set_source_files_properties("${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/swig/lua/bulletLUA_wrap.cxx" PROPERTIES GENERATED TRUE )
  set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES "bulletLUA_wrap.cxx")

  swig_add_library(
    ${CMAKE_PROJECT_NAME}-lua-swig-bullet-static
    TYPE STATIC
    LANGUAGE lua
    SOURCES "${LUA_SWIG_SOURCE_FILES}"
    OUTPUT_DIR ${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/swig/lua
    OUTFILE_DIR ${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/swig/lua
    )
  target_compile_definitions(${CMAKE_PROJECT_NAME}-lua-swig-bullet-static PUBLIC ${${CMAKE_PROJECT_NAME}_DEFINITIONS})

  target_link_libraries(${CMAKE_PROJECT_NAME}-lua-swig-bullet-static ${CMAKE_PROJECT_NAME}-static)
  list(APPEND EXTRA_LIBS ${CMAKE_PROJECT_NAME}-lua-swig-bullet-static)
  list(APPEND INTERFACE_FILES ${LUA_SWIG_SOURCE_FILES})

  swig_add_library(
    ${CMAKE_PROJECT_NAME}-lua-swig-bullet
    TYPE MODULE
    LANGUAGE lua
    SOURCES "${LUA_SWIG_SOURCE_FILES}"
    OUTPUT_DIR ${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/swig/lua
    OUTFILE_DIR ${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/swig/lua
    )
  target_compile_definitions(${CMAKE_PROJECT_NAME}-lua-swig-bullet PUBLIC ${${CMAKE_PROJECT_NAME}_DEFINITIONS})
  target_link_libraries(${CMAKE_PROJECT_NAME}-lua-swig-bullet ${CMAKE_PROJECT_NAME}-static ${EXTRA_LIBS})

endmacro()

macro(LUA_NJLI_SWIG)
  set(CMAKE_SWIG_FLAGS "")

  SUBDIRLIST(SUBDIRS "${CMAKE_BINARY_DIR}/${BULLET_INCLUDE_DIRECTORY}" BULLET_INCLUDE_DIRECTORY_LIST)
  SUBDIRLIST(SUBDIRS "${CMAKE_BINARY_DIR}/${JSONCPP_INCLUDE_DIRECTORY}" JSONCPP_INCLUDE_DIRECTORY_LIST)

  configure_file("${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/swig.in/script/njlic/_Defines.swg.in"
    "${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/swig.in/script/njlic/_Defines.swg")

  file(GLOB_RECURSE LUA_SWIG_SOURCE_FILES
    ${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/swig.in/script/njlic/*.swg
    "${CMAKE_BINARY_DIR}/${BULLET_INCLUDE_DIRECTORY}" 
    ${BULLET_INCLUDE_DIRECTORY_LIST}
    "${CMAKE_BINARY_DIR}/${JSONCPP_INCLUDE_DIRECTORY}" 
    ${JSONCPP_INCLUDE_DIRECTORY_LIST}
    "${CMAKE_BINARY_DIR}/${DEBUGDRAW_INCLUDE_DIRECTORY}" 
    "${CMAKE_BINARY_DIR}/${NANOVG_INCLUDE_DIRECTORY}" 
    )

  list(APPEND LUA_SWIG_SOURCE_FILES
    "${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/swig.in/script/njlic/njlic.i" 
  )

  SUBDIRLIST(SUBDIRS "${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/swig.in/script/njlic" SWIGIN_SCRIPTS_INCLUDE_DIRECTORY_LIST)

  set(${CMAKE_PROJECT_NAME}_LUA_SWIG_FLAGS "-includeall")
  list(APPEND ${CMAKE_PROJECT_NAME}_LUA_SWIG_FLAGS "-fcompact")
  list(APPEND ${CMAKE_PROJECT_NAME}_LUA_SWIG_FLAGS "-fvirtual")
  list(APPEND ${CMAKE_PROJECT_NAME}_LUA_SWIG_FLAGS "-v")
  list(APPEND ${CMAKE_PROJECT_NAME}_LUA_SWIG_FLAGS "-w201")
  list(APPEND ${CMAKE_PROJECT_NAME}_LUA_SWIG_FLAGS "-w312")
  list(APPEND ${CMAKE_PROJECT_NAME}_LUA_SWIG_FLAGS "-ignoremissing")
  # list(APPEND ${CMAKE_PROJECT_NAME}_LUA_SWIG_FLAGS "-cpperraswarn")
  list(APPEND ${CMAKE_PROJECT_NAME}_LUA_SWIG_FLAGS "-DBT_INFINITY")
  list(APPEND ${CMAKE_PROJECT_NAME}_LUA_SWIG_FLAGS "-DSWIG_TYPE_TABLE=myprojectname")

  foreach(_SWIG_SOURCE_FILE ${LUA_SWIG_SOURCE_FILES})
    set_property(SOURCE ${_SWIG_SOURCE_FILE} PROPERTY SWIG_FLAGS ${${CMAKE_PROJECT_NAME}_LUA_SWIG_FLAGS})
    set_property(SOURCE ${_SWIG_SOURCE_FILE} PROPERTY CPLUSPLUS ON)
    set_property(SOURCE ${_SWIG_SOURCE_FILE} PROPERTY SWIG_INCLUDE_DIRECTORIES "${SWIGIN_SCRIPTS_INCLUDE_DIRECTORY_LIST}")
  endforeach()


  include_directories("${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/swig.in/script/njlic" 
    ${SWIGIN_SCRIPTS_INCLUDE_DIRECTORY_LIST} 

    "${CMAKE_BINARY_DIR}/${BULLET_INCLUDE_DIRECTORY}" 
    ${BULLET_INCLUDE_DIRECTORY_LIST}

    "${CMAKE_BINARY_DIR}/${JSONCPP_INCLUDE_DIRECTORY}" 

    "${CMAKE_BINARY_DIR}/${DEBUGDRAW_INCLUDE_DIRECTORY}" 

    "${CMAKE_BINARY_DIR}/${NANOVG_INCLUDE_DIRECTORY}" 

    ${NJLIC_INCLUDE_DIRECTORIES} ${NJLIC_INCLUDE_DIRECTORY_LIST} 
    ${BULLET_LOCAL_INCLUDE_DIRECTORIES} 
    ${LUA_SRC_LOCAL_INCLUDE_DIRECTORIES}
    ${LUAEXTS_LOCAL_INCLUDE_DIRECTORIES} ${LUAEXTS_LOCAL_INCLUDE_DIRECTORY_LIST}
    )

  get_property(_INCLUDE_DIRECTORIES DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY INCLUDE_DIRECTORIES)
  foreach(_INCLUDE_DIRECTORY ${_INCLUDE_DIRECTORIES})
    MESSAGE(STATUS "SWIG_INCLUDE_DIRECTORY ${_INCLUDE_DIRECTORY}")
  endforeach()
  
  set_source_files_properties( "${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/swig/lua/njlicLUA_wrap.cxx" PROPERTIES GENERATED TRUE )
  set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES "njlicLUA_wrap.cxx")
  list(APPEND ${CMAKE_PROJECT_NAME}_DEFINITIONS NJLIC_SWIG=1 BT_INFINITY)

  swig_add_library(
    ${CMAKE_PROJECT_NAME}-lua-swig-njlic-static
    TYPE STATIC
    LANGUAGE lua
    SOURCES "${LUA_SWIG_SOURCE_FILES}"
    OUTPUT_DIR ${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/swig/lua
    OUTFILE_DIR ${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/swig/lua
    )
  target_compile_definitions(${CMAKE_PROJECT_NAME}-lua-swig-njlic-static PUBLIC ${${CMAKE_PROJECT_NAME}_DEFINITIONS})
  target_link_libraries(${CMAKE_PROJECT_NAME}-lua-swig-njlic-static ${CMAKE_PROJECT_NAME}-static)
  list(APPEND EXTRA_LIBS ${CMAKE_PROJECT_NAME}-lua-swig-njlic-static)
  list(APPEND INTERFACE_FILES ${LUA_SWIG_SOURCE_FILES})

  # message(status "AFTER - ${${CMAKE_PROJECT_NAME}_THIRDPARTY_INCLUDE_DIRECTORES}")
  target_include_directories(${CMAKE_PROJECT_NAME}-lua-swig-njlic-static
    PRIVATE $<BUILD_INTERFACE:${${CMAKE_PROJECT_NAME}_THIRDPARTY_INCLUDE_DIRECTORES}>
    PRIVATE $<BUILD_INTERFACE:${${CMAKE_PROJECT_NAME}_PROJECT_INCLUDE_DIRECTORES}>
    )

  swig_add_library(
    ${CMAKE_PROJECT_NAME}-lua-swig-njlic
    TYPE MODULE
    LANGUAGE lua
    SOURCES "${LUA_SWIG_SOURCE_FILES}"
    OUTPUT_DIR ${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/swig/lua
    OUTFILE_DIR ${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/swig/lua
    )
  target_compile_definitions(${CMAKE_PROJECT_NAME}-lua-swig-njlic PUBLIC ${${CMAKE_PROJECT_NAME}_DEFINITIONS})
  if(APPLE)
    set_target_properties(${CMAKE_PROJECT_NAME}-lua-swig-njlic PROPERTIES MACOSX_RPATH 1)
    if(IOS OR TVOS)
      SET_TARGET_PROPERTIES (
        ${CMAKE_PROJECT_NAME}-lua-swig-njlic PROPERTIES
        XCODE_ATTRIBUTE_ENABLE_BITCODE "NO"
        )
    endif(IOS OR TVOS)
  elseif(UNIX AND NOT ANDROID)
    set_target_properties(${CMAKE_PROJECT_NAME}-lua-swig-njlic PROPERTIES
      VERSION ${LT_VERSION}
      SOVERSION ${LT_REVISION}
      OUTPUT_NAME "${CMAKE_PROJECT_NAME}-lua-swig-njlic-${LT_RELEASE}")
  else()
    # set_target_properties(${CMAKE_PROJECT_NAME}-lua-swig-njlic PROPERTIES
    #   VERSION ${${CMAKE_PROJECT_NAME}-lua-swig-njlic_VERSION}
    #   SOVERSION ${LT_REVISION}
    #   OUTPUT_NAME "${CMAKE_PROJECT_NAME}-lua-swig-njlic")
  endif()
  target_link_libraries(${CMAKE_PROJECT_NAME}-lua-swig-njlic ${CMAKE_PROJECT_NAME}-static)

  target_include_directories(${CMAKE_PROJECT_NAME}-lua-swig-njlic
    PRIVATE $<BUILD_INTERFACE:${${CMAKE_PROJECT_NAME}_THIRDPARTY_INCLUDE_DIRECTORES}>
    PRIVATE $<BUILD_INTERFACE:${${CMAKE_PROJECT_NAME}_PROJECT_INCLUDE_DIRECTORES}>
    )




endmacro()

if(${CMAKE_PROJECT_NAME}_LUA_SWIG)
  if(${CMAKE_VERSION} VERSION_LESS "3.11")
    message("Please consider to switch to CMake 3.11 in order to use SWIG")
  else()
    find_package(SWIG REQUIRED)

    if(${SWIG_FOUND})
      MESSAGE(STATUS "SWIG_FOUND ${SWIG_FOUND}")
      MESSAGE(STATUS "SWIG_DIR ${SWIG_DIR}")
      MESSAGE(STATUS "SWIG_EXECUTABLE ${SWIG_EXECUTABLE}")
      MESSAGE(STATUS "SWIG_VERSION ${SWIG_VERSION}")

      include(${SWIG_USE_FILE})

      LUA_NJLI_SWIG()
      LUA_BULLET_SWIG()

    endif()
  endif()
endif()
