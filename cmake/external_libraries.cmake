
OPTION(${CMAKE_PROJECT_NAME}_USE_NANOVG_LIBRARY "Use nanovg library" ON)
IF(${CMAKE_PROJECT_NAME}_USE_NANOVG_LIBRARY)
  add_definitions(-DUSE_NANOVG_LIBRARY)
endif()

set(BULLET_INCLUDE_DIRECTORY "thirdparty/bullet/include")
set(DEBUGDRAW_INCLUDE_DIRECTORY "thirdparty/debug-draw/include")
set(GLM_INCLUDE_DIRECTORY "thirdparty/glm/include")
set(IMGUI_INCLUDE_DIRECTORY "thirdparty/imgui/include")
set(IMGUIZMO_INCLUDE_DIRECTORY "thirdparty/imguizmo/include")
set(JSONCPP_INCLUDE_DIRECTORY "thirdparty/jsoncpp/include")
set(NANOVG_INCLUDE_DIRECTORY "thirdparty/nanovg/include")
set(OGG_INCLUDE_DIRECTORY "thirdparty/ogg/include")
set(VORBIS_INCLUDE_DIRECTORY "thirdparty/vorbis/include")

DOWNLOAD_LIBRARY_INCLUDE_FILES("bullet" "https://www.dropbox.com/s/bvtxtpqa925godz/BULLET-1.85_include.tar.gz?dl=0" ${BULLET_INCLUDE_DIRECTORY})
DOWNLOAD_LIBRARY_INCLUDE_FILES("debug-draw" "https://www.dropbox.com/s/isuefnerr26na7p/LIBDEBUGDRAW_include.tar.gz?dl=0" ${DEBUGDRAW_INCLUDE_DIRECTORY})
DOWNLOAD_LIBRARY_INCLUDE_FILES("glm" "https://www.dropbox.com/s/2sr0kts3054ojvw/LIBGLM_include.tar.gz?dl=0" ${GLM_INCLUDE_DIRECTORY})
DOWNLOAD_LIBRARY_INCLUDE_FILES("imgui" "https://www.dropbox.com/s/govijzlvvvyp7gy/LIBIMGUI_1.5.0_include.tar.gz?dl=0" ${IMGUI_INCLUDE_DIRECTORY})
DOWNLOAD_LIBRARY_INCLUDE_FILES("imguizmo" "https://www.dropbox.com/s/1z8lar75aidhcjx/LIBIMGUIZMO_1.04_include.tar.gz?dl=0" ${IMGUIZMO_INCLUDE_DIRECTORY})
DOWNLOAD_LIBRARY_INCLUDE_FILES("jsoncpp" "https://www.dropbox.com/s/v8dt6qpgp389ham/LIBJSONCPP_1.8.0_include.tar.gz?dl=0" ${JSONCPP_INCLUDE_DIRECTORY})
DOWNLOAD_LIBRARY_INCLUDE_FILES("nanovg" "https://www.dropbox.com/s/7lik0sx0u1441ma/LIBNANOVG_include.tar.gz?dl=0" ${NANOVG_INCLUDE_DIRECTORY})
DOWNLOAD_LIBRARY_INCLUDE_FILES("ogg" "https://www.dropbox.com/s/wm29ek4iifpkta2/LIBOGG_1.3.2_include.tar.gz?dl=0" ${OGG_INCLUDE_DIRECTORY})
DOWNLOAD_LIBRARY_INCLUDE_FILES("vorbis" "https://www.dropbox.com/s/f6l6iyq6o7fo72e/LIBVORBIS_1.3.5_include.tar.gz?dl=0" ${VORBIS_INCLUDE_DIRECTORY})

if(EMSCRIPTEN)
  include("${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/cmake/emscripten_external_libraries.cmake")
elseif(WINDOWS)
  if(ARCH_64)
    if(OCULUS)
      include("${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/cmake/oculus_windows64_external_libraries.cmake")
    else()
      include("${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/cmake/windows64_external_libraries.cmake")
    endif()
  else()
    if(OCULUS)
      include("${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/cmake/oculus_windows32_external_libraries.cmake")
    else()
      include("${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/cmake/windows32_external_libraries.cmake")
    endif()
  endif()
elseif(APPLE)
  if(IOS)
    if(VR)
      include("${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/cmake/vr_ios_external_libraries.cmake")
    else()
      include("${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/cmake/ios_external_libraries.cmake")
    endif()
  elseif(TVOS)
    include("${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/cmake/appletv_external_libraries.cmake")
  else()
    if(OCULUS)
      include("${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/cmake/oculus_macos_external_libraries.cmake")
    else()
      include("${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/cmake/macos_external_libraries.cmake")
    endif()
  endif()
elseif(UNIX AND NOT APPLE AND NOT ANDROID)
  if(LINUX)
    if(OCULUS)
      include("${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/cmake/oculus_linux_external_libraries.cmake")
    else()
      include("${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/cmake/linux_external_libraries.cmake")
    endif()
  elseif(UNIX)
    include("${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/cmake/unix_external_libraries.cmake")
  endif()
elseif(ANDROID)
  if(VR)
    include("${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/cmake/vr_android_external_libraries.cmake")
  else()
    include("${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/cmake/android_external_libraries.cmake")
  endif()
endif()

