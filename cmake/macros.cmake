
macro(REMOVE_PLATFORM_FILES PLATFORM_DIR)

  file(GLOB_RECURSE PLATFORM_SOURCE_FILES
    ${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/njli/platform/${PLATFORM_DIR}/*.c
    ${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/njli/platform/${PLATFORM_DIR}/*.cpp
    ${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/njli/platform/${PLATFORM_DIR}/*.cxx
    ${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/njli/platform/${PLATFORM_DIR}/*.m
    ${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/njli/platform/${PLATFORM_DIR}/*.mm
    )

  file(GLOB_RECURSE PLATFORM_INCLUDE_FILES
    ${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/njli/platform/${PLATFORM_DIR}/*.h
    ${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/njli/platform/${PLATFORM_DIR}/*.hpp
    ${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/njli/platform/${PLATFORM_DIR}/*.hxx
    )

  if(PLATFORM_SOURCE_FILES)
    list(REMOVE_ITEM SOURCE_FILES ${PLATFORM_SOURCE_FILES})
  endif()
  if(PLATFORM_INCLUDE_FILES)
    list(REMOVE_ITEM INCLUDE_FILES ${PLATFORM_INCLUDE_FILES})
  endif()
  list(REMOVE_ITEM NJLIC_INCLUDE_DIRECTORY_LIST ${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/njli/platform/${PLATFORM_DIR})

endmacro()

macro(DOWNLOAD_LIBRARY_INCLUDE_FILES LIBNAME LIBRARY_INCLUDE_URL LIBRARY_DIRECTORY)

  set(${LIBNAME}_URL_INCLUDE 
    "${LIBRARY_INCLUDE_URL}" 
    CACHE STRING "The URL for the include files for ${LIBRARY_DIRECTORY}")

  RETRIEVE_TAR(
    "${${LIBNAME}_URL_INCLUDE}"
    "${LIBRARY_DIRECTORY}"
    "SKIP"
    )

  SET(SUBDIRS "")
  SUBDIRLIST(SUBDIRS "${CMAKE_BINARY_DIR}/${LIBRARY_DIRECTORY}" ${LIBNAME}_INCLUDE_DIRECTORY_LIST)

  # include_directories("${CMAKE_BINARY_DIR}/${LIBRARY_DIRECTORY}" ${${LIBNAME}_INCLUDE_DIRECTORY_LIST})
  list(APPEND ${CMAKE_PROJECT_NAME}_THIRDPARTY_INCLUDE_DIRECTORES "${CMAKE_BINARY_DIR}/${LIBRARY_DIRECTORY}")
  list(APPEND ${CMAKE_PROJECT_NAME}_THIRDPARTY_INCLUDE_DIRECTORES "${${LIBNAME}_INCLUDE_DIRECTORY_LIST}")
  list(REMOVE_DUPLICATES ${CMAKE_PROJECT_NAME}_THIRDPARTY_INCLUDE_DIRECTORES)



endmacro()

macro(DOWNLOAD_STATIC_RELEASE_LIBRARY_BINARY_FILES LIBNAME LIBRARY_BINARY_URL LIBRARY_DIRECTORY)

  set(${LIBNAME}_URL_BINARY 
    "${LIBRARY_BINARY_URL}" 
    CACHE STRING "The URL for the include files for ${LIBRARY_DIRECTORY}")

  RETRIEVE_TAR(
    "${${LIBNAME}_URL_BINARY}"
    "${LIBRARY_DIRECTORY}"
    "SKIP"
    )

  MESSAGE(STATUS "library directory ${CMAKE_BINARY_DIR}/${LIBRARY_DIRECTORY}/")
  file(GLOB_RECURSE ${LIBNAME}_RELEASE_BINARY_FILES
    ${CMAKE_BINARY_DIR}/${LIBRARY_DIRECTORY}/*.a
    )

  MESSAGE(STATUS "_RELEASE_BINARY_FILES ${${LIBNAME}_RELEASE_BINARY_FILES}")

  foreach(BINARY_FILE ${${LIBNAME}_RELEASE_BINARY_FILES})
    string(FIND ${BINARY_FILE} "/" _IDXSLASH_ REVERSE)
    string(FIND ${BINARY_FILE} "." _IDXDOT_ REVERSE)

    MATH(EXPR _BEGIN_ "${_IDXSLASH_}+1")
    MATH(EXPR _LENGTH_ "${_IDXDOT_}-${_IDXSLASH_}-1")

    string(SUBSTRING ${BINARY_FILE} ${_BEGIN_} ${_LENGTH_} _LIB_NAME_)

    string(RANDOM RANDOMSTRING)
    set(LIBRARY_TARGET_NAME "${_LIB_NAME_}_RELEASE_LIBRARY_${RANDOMSTRING}")

    MESSAGE(STATUS "BINARY_FILE ${BINARY_FILE} - LIBRARY_TARGET_NAME ${LIBRARY_TARGET_NAME}")

    add_library(${LIBRARY_TARGET_NAME} STATIC IMPORTED )
    set_target_properties(${LIBRARY_TARGET_NAME} PROPERTIES IMPORTED_LOCATION "${BINARY_FILE}")
    list(APPEND EXTRA_LIBS ${LIBRARY_TARGET_NAME})
  endforeach()

endmacro()

macro(DOWNLOAD_STATIC_DEBUG_LIBRARY_BINARY_FILES LIBNAME LIBRARY_BINARY_URL LIBRARY_DIRECTORY)

  set(${LIBNAME}_URL_BINARY 
    "${LIBRARY_BINARY_URL}" 
    CACHE STRING "The URL for the include files for ${LIBRARY_DIRECTORY}")

  RETRIEVE_TAR(
    "${${LIBNAME}_URL_BINARY}"
    "${LIBRARY_DIRECTORY}"
    "SKIP"
    )

  MESSAGE(STATUS "library directory
  ${CMAKE_BINARY_DIR}/${LIBRARY_DIRECTORY}/")
  file(GLOB_RECURSE ${LIBNAME}_DEBUG_BINARY_FILES
    ${CMAKE_BINARY_DIR}/${LIBRARY_DIRECTORY}/*.a
    )

  MESSAGE(STATUS "_DEBUG_BINARY_FILES ${${LIBNAME}_DEBUG_BINARY_FILES}")

  foreach(BINARY_FILE ${${LIBNAME}_DEBUG_BINARY_FILES})
    string(FIND ${BINARY_FILE} "/" _IDXSLASH_ REVERSE)
    string(FIND ${BINARY_FILE} "." _IDXDOT_ REVERSE)

    MATH(EXPR _BEGIN_ "${_IDXSLASH_}+1")
    MATH(EXPR _LENGTH_ "${_IDXDOT_}-${_IDXSLASH_}-1")

    string(SUBSTRING ${BINARY_FILE} ${_BEGIN_} ${_LENGTH_} _LIB_NAME_)

    MESSAGE(STATUS "BINARY_FILE ${BINARY_FILE} - _LIB_NAME_ ${_LIB_NAME_}")

    string(RANDOM RANDOMSTRING)
    set(LIBRARY_TARGET_NAME ${_LIB_NAME_}__DEBUG_LIBRARY_${RANDOMSTRING})

    add_library(${RANDOMSTRING} STATIC IMPORTED )
    set_target_properties(${RANDOMSTRING} PROPERTIES IMPORTED_LOCATION "${BINARY_FILE}")
    list(APPEND EXTRA_DEBUG_LIBS ${RANDOMSTRING})
  endforeach()

endmacro()

