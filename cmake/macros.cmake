
macro(REMOVE_PLATFORM_FILES PLATFORM_DIR)

    file(GLOB_RECURSE PLATFORM_SOURCE_FILES
            ${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/njli/platform/${PLATFORM_DIR}/*.c
            ${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/njli/platform/${PLATFORM_DIR}/*.cpp
            ${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/njli/platform/${PLATFORM_DIR}/*.cxx
            ${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/njli/platform/${PLATFORM_DIR}/*.m
            ${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/njli/platform/${PLATFORM_DIR}/*.mm
            )

    file(GLOB_RECURSE PLATFORM_INCLUDE_FILES
            ${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/njli/platform/${PLATFORM_DIR}/*.h
            ${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/njli/platform/${PLATFORM_DIR}/*.hpp
            ${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/njli/platform/${PLATFORM_DIR}/*.hxx
            )

    if (PLATFORM_SOURCE_FILES)
        list(REMOVE_ITEM SOURCE_FILES ${PLATFORM_SOURCE_FILES})
    endif ()
    if (PLATFORM_INCLUDE_FILES)
        list(REMOVE_ITEM INCLUDE_FILES ${PLATFORM_INCLUDE_FILES})
    endif ()
    list(REMOVE_ITEM NJLIC_INCLUDE_DIRS ${${CMAKE_PROJECT_NAME}_REPO_DIRECTORY}/njli/platform/${PLATFORM_DIR})

endmacro()

macro(DOWNLOAD_LIBRARY_INCLUDE_FILES LIBNAME LIBRARY_INCLUDE_URL LIBRARY_DIRECTORY)

    set(${LIBNAME}_URL_INCLUDE
            "${LIBRARY_INCLUDE_URL}"
            CACHE STRING "The URL for the include files for ${LIBRARY_DIRECTORY}")

    RETRIEVE_TAR(
            "${${LIBNAME}_URL_INCLUDE}"
            "${LIBRARY_DIRECTORY}"
            "SKIP"
    )

    # SET(SUBDIRS "")
    # SUBDIRLIST(SUBDIRS "${CMAKE_BINARY_DIR}/${LIBRARY_DIRECTORY}" ${LIBNAME}_INCLUDE_DIRECTORY_LIST)

    # string(TOUPPER ${LIBNAME} UPPER_LIBNAME)
    # if(EXISTS "${CMAKE_BINARY_DIR}/${LIBRARY_DIRECTORY}")
    #   set(${UPPER_LIBNAME}_INCLUDE_DIR "${CMAKE_BINARY_DIR}/${LIBRARY_DIRECTORY}")
    # elseif(EXISTS "${LIBRARY_DIRECTORY}")
    #   set(${UPPER_LIBNAME}_INCLUDE_DIR "${LIBRARY_DIRECTORY}")
    # endif()

    # SET(SUBDIRS "")
    # SUBDIRLIST(SUBDIRS "${CMAKE_BINARY_DIR}/${LIBRARY_DIRECTORY}" ${UPPER_LIBNAME}_INCLUDE_DIRS)
    # list(APPEND ${LIBNAME}_INCLUDE_DIRS ${CMAKE_BINARY_DIR}/${LIBRARY_DIRECTORY})

    # MESSAGE(STATUS "Downloaded Include Directories for ${UPPER_LIBNAME} (${UPPER_LIBNAME}_INCLUDE_DIR): ${${UPPER_LIBNAME}_INCLUDE_DIR}")
endmacro()

macro(DOWNLOAD_LIBRARY_TAR LIBRARY_NAME LIBRARY_BINARY_URL LIBRARY_DIRECTORY)

    RETRIEVE_TAR(
            "${LIBRARY_BINARY_URL}"
            "${LIBRARY_DIRECTORY}"
            "SKIP"
    )

    if (WINDOWS)
        file(GLOB_RECURSE _LIBRARY_BINARY_FILES
                ${CMAKE_BINARY_DIR}/${LIBRARY_DIRECTORY}/*.lib
                )
    elseif (APPLE)
        file(GLOB_RECURSE _LIBRARY_BINARY_FILES
                ${CMAKE_BINARY_DIR}/${LIBRARY_DIRECTORY}/*.a
                )
    else ()
        file(GLOB_RECURSE _LIBRARY_BINARY_FILES
                ${CMAKE_BINARY_DIR}/${LIBRARY_DIRECTORY}/*.so
                )
    endif ()

    string(LENGTH ${CMAKE_BINARY_DIR} BINARY_DIR_LENGTH)
    string(LENGTH ${LIBRARY_DIRECTORY} LIBRARY_DIR_LENGTH)

    string(TOUPPER ${LIBRARY_NAME} LIBRARY_NAME_UPPER)

    set(${LIBRARY_NAME_UPPER}_BINARY_FILENAMES "")

    foreach (BINARY_FILE ${_LIBRARY_BINARY_FILES})
        string(LENGTH ${BINARY_FILE} BINARY_FILE_LENGTH)

        MATH(EXPR _BIN_LIB_DIR_LENGTH_
                "${BINARY_DIR_LENGTH}+${LIBRARY_DIR_LENGTH}+2")
        MATH(EXPR _ONLY_BIN_LENGTH_ "${BINARY_FILE_LENGTH} - ${_BIN_LIB_DIR_LENGTH_}")

        string(SUBSTRING ${BINARY_FILE} ${_BIN_LIB_DIR_LENGTH_} ${_ONLY_BIN_LENGTH_} ONLYBINARY_FILE)
        list(APPEND ${LIBRARY_NAME_UPPER}_BINARY_FILENAMES ${ONLYBINARY_FILE})

    endforeach ()

    MESSAGE(STATUS "Downloaded Binary Files: ${${LIBRARY_NAME_UPPER}_BINARY_FILENAMES}")


endmacro()

# macro(ADD_LIBRARIES
#     BINARY_FILES
#     RELEASE_LIBRARY_IMPORTED_LOCATION
#     DEBUG_LIBRARY_IMPORTED_LOCATION
#     MINSIZEREL_LIBRARY_IMPORTED_LOCATION
#     RELWITHDEBUGINFO_LIBRARY_IMPORTED_LOCATION
#     )
#   foreach(BINARY_FILE ${BINARY_FILES})
#     string(FIND ${BINARY_FILE} "/" _IDXSLASH_ REVERSE)
#     string(FIND ${BINARY_FILE} "." _IDXDOT_ REVERSE)
#
#     MATH(EXPR _BEGIN_ "${_IDXSLASH_}+1")
#     MATH(EXPR _LENGTH_ "${_IDXDOT_}-${_IDXSLASH_}-1")
#
#     string(SUBSTRING ${BINARY_FILE} ${_BEGIN_} ${_LENGTH_} _LIB_NAME_)
#
#     string(RANDOM RANDOMSTRING)
#     set(LIBRARY_TARGET_NAME "${_LIB_NAME_}_LIBRARY_${RANDOMSTRING}")
#
#     add_library(${LIBRARY_TARGET_NAME} STATIC IMPORTED )
#
#     set_target_properties(${LIBRARY_TARGET_NAME}
#       PROPERTIES
#       IMPORTED_LOCATION_DEBUG "${CMAKE_BINARY_DIR}/${DEBUG_LIBRARY_IMPORTED_LOCATION}/${BINARY_FILE}"
#       IMPORTED_LOCATION_MINSIZEREL "${CMAKE_BINARY_DIR}/${MINSIZEREL_LIBRARY_IMPORTED_LOCATION}/${BINARY_FILE}"
#       IMPORTED_LOCATION_RELEASE "${CMAKE_BINARY_DIR}/${RELEASE_LIBRARY_IMPORTED_LOCATION}/${BINARY_FILE}"
#       IMPORTED_LOCATION_RELWITHDEBUGINFO "${CMAKE_BINARY_DIR}/${RELWITHDEBUGINFO_LIBRARY_IMPORTED_LOCATION}/${BINARY_FILE}"
#       )
#     list(APPEND LIBRARY_TARGET_NAMES ${LIBRARY_TARGET_NAME})
#   endforeach()
# endmacro()

macro(ADD_LIBRARIES
        BINARY_FILES
        LIBRARY_IMPORTED_LOCATION
        )
    foreach (BINARY_FILE ${BINARY_FILES})
        string(FIND ${BINARY_FILE} "/" _IDXSLASH_ REVERSE)
        string(FIND ${BINARY_FILE} "." _IDXDOT_ REVERSE)

        MATH(EXPR _BEGIN_ "${_IDXSLASH_}+1")
        MATH(EXPR _LENGTH_ "${_IDXDOT_}-${_IDXSLASH_}-1")

        string(SUBSTRING ${BINARY_FILE} ${_BEGIN_} ${_LENGTH_} _LIB_NAME_)

        string(RANDOM RANDOMSTRING)
        set(LIBRARY_TARGET_NAME "${_LIB_NAME_}_LIBRARY_${RANDOMSTRING}")

        set(_IMPORT_LOCATION "${CMAKE_BINARY_DIR}/${LIBRARY_IMPORTED_LOCATION}/${BINARY_FILE}")
        add_library(${LIBRARY_TARGET_NAME} STATIC IMPORTED)

        set_target_properties(${LIBRARY_TARGET_NAME} PROPERTIES IMPORTED_LOCATION "${_IMPORT_LOCATION}")
        list(APPEND LIBRARY_TARGET_NAMES ${LIBRARY_TARGET_NAME})
        # message(status "LIBRARY_TARGET_NAME ${LIBRARY_TARGET_NAME}")
        # message(status "_IMPORT_LOCATION ${_IMPORT_LOCATION}")
    endforeach ()
endmacro()

# macro(ADD_LIBRARIES LIBRARY_DIRECTORY LIBRARY_IMPORTED_LOCATION BINARY_FILES )
#   string(LENGTH ${CMAKE_BINARY_DIR} BINARY_DIR_LENGTH)
#   string(LENGTH ${LIBRARY_DIRECTORY} LIBRARY_DIR_LENGTH)
#
#   foreach(BINARY_FILE ${BINARY_FILES})
#     string(LENGTH ${BINARY_FILE} BINARY_FILE_LENGTH)
#
#     MATH(EXPR _BIN_LIB_DIR_LENGTH_
#       "${BINARY_DIR_LENGTH}+${LIBRARY_DIR_LENGTH}+2")
#     MATH(EXPR _ONLY_BIN_LENGTH_ "${BINARY_FILE_LENGTH} - ${_BIN_LIB_DIR_LENGTH_}")
#
#     string(SUBSTRING ${BINARY_FILE} ${_BIN_LIB_DIR_LENGTH_} ${_ONLY_BIN_LENGTH_} ONLYBINARY_FILE)
#
#     string(FIND ${BINARY_FILE} "/" _IDXSLASH_ REVERSE)
#     string(FIND ${BINARY_FILE} "." _IDXDOT_ REVERSE)
#
#     MATH(EXPR _BEGIN_ "${_IDXSLASH_}+1")
#     MATH(EXPR _LENGTH_ "${_IDXDOT_}-${_IDXSLASH_}-1")
#
#     string(SUBSTRING ${BINARY_FILE} ${_BEGIN_} ${_LENGTH_} _LIB_NAME_)
#
#     string(RANDOM RANDOMSTRING)
#     set(LIBRARY_TARGET_NAME "${_LIB_NAME_}_DEBUG_LIBRARY_${RANDOMSTRING}")
#
#     add_library(${LIBRARY_TARGET_NAME} STATIC IMPORTED )
#     set(BINARY_LOCATION "${CMAKE_BINARY_DIR}/${LIBRARY_IMPORTED_LOCATION}/${ONLYBINARY_FILE}")
#
#     if ("${LIBRARY_IMPORTED_LOCATION}" STREQUAL "")
#       set(BINARY_LOCATION "${BINARY_FILE}")
#     endif()
#
#     set_target_properties(${LIBRARY_TARGET_NAME} PROPERTIES IMPORTED_LOCATION "${BINARY_LOCATION}")
#     list(APPEND LIBRARY_TARGET_NAMES ${LIBRARY_TARGET_NAME})
#   endforeach()
# endmacro()

macro(DOWNLOAD_STATIC_RELEASE_LIBRARY_BINARY_FILES LIBRARY_NAME LIBRARY_BINARY_URL LIBRARY_DIRECTORY LIBRARY_IMPORTED_LOCATION)

    DOWNLOAD_LIBRARY_TAR("${LIBRARY_NAME}" "${LIBRARY_BINARY_URL}" "${LIBRARY_DIRECTORY}")
    ADD_LIBRARIES(${LIBRARY_DIRECTORY} "${LIBRARY_BINARY_FILES}" ${LIBRARY_IMPORTED_LOCATION})
    foreach (LIBRARY_TARGET_NAME ${LIBRARY_TARGET_NAMES})
        list(APPEND EXTRA_LIBS ${LIBRARY_TARGET_NAME})
    endforeach ()

endmacro()

# macro(DOWNLOAD_STATIC_DEBUG_LIBRARY_BINARY_FILES LIBRARY_NAME LIBRARY_BINARY_URL LIBRARY_DIRECTORY LIBRARY_IMPORTED_LOCATION)
#
#   DOWNLOAD_LIBRARY_TAR("${LIBRARY_NAME}" "${LIBRARY_BINARY_URL}" "${LIBRARY_DIRECTORY}")
#   ADD_LIBRARIES(${LIBRARY_DIRECTORY} "${LIBRARY_BINARY_FILES}" ${LIBRARY_IMPORTED_LOCATION} )
#   foreach(LIBRARY_TARGET_NAME ${LIBRARY_TARGET_NAMES})
#     list(APPEND EXTRA_DEBUG_LIBS ${LIBRARY_TARGET_NAME})
#   endforeach()
#
# endmacro()

function(echo_target_property tgt prop)
    # v for value, d for defined, s for set
    get_property(v TARGET ${tgt} PROPERTY ${prop})
    get_property(d TARGET ${tgt} PROPERTY ${prop} DEFINED)
    get_property(s TARGET ${tgt} PROPERTY ${prop} SET)

    # only produce output for values that are set
    # if(s)
    message("tgt='${tgt}' prop='${prop}'")
    message("  value='${v}'")
    message("  defined='${d}'")
    message("  set='${s}'")
    message("")
    # endif()
endfunction()


