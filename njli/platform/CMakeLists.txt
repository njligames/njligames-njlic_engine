CMAKE_MINIMUM_REQUIRED(VERSION 3.7.2)
PROJECT (NJLIGameEngine)
include (CPack)
#INCLUDE (CTest)

SET_PROPERTY(GLOBAL PROPERTY TARGET_SUPPORTS_SHARED_LIBS TRUE)

SET( CMAKE_INSTALL_INCLUDEDIR include/ CACHE STRING "The include directory" )
SET( CMAKE_INSTALL_DATADIR data/ CACHE STRING "The data directory" )
SET( CMAKE_INSTALL_DOCDIR doc/ CACHE STRING "The documentation directory" )
SET( CMAKE_INSTALL_TESTDIR tests/ CACHE STRING "The tests directory" )
SET( NJLI_THIRDPARTY_DIRECTORY "${CMAKE_SOURCE_DIR}/../External/thirdparty/" CACHE STRING "The third party include directory")
SET( CMAKE_BUILD_TYPE Debug CACHE STRING "The build type" )

SET ( NJLI_GRAPHICS_PLATFORM opengl_es_2.0 CACHE STRING  "The rendering platform to use" )
SET ( NJLI_BUILD_PLATFORM macOS CACHE STRING "The platform being created" )
SET ( NJLI_SOUND_PLATFORM fmod CACHE STRING "The sound to use" )

SET( NJLI_SOURCE_DIRECTORY "${CMAKE_SOURCE_DIR}/src" CACHE STRING "The njli source directory")
SET( NJLI_SWIGIN_DIRECTORY "${CMAKE_SOURCE_DIR}/src/swig.in/" CACHE STRING "The njli source directory")

SET(NJLI_ASSIMP_POSTFIX "")
SET(NJLI_FMOD_POSTFIX "")
string(COMPARE EQUAL "${CMAKE_BUILD_TYPE}" "Debug" is_equal)
IF(is_equal)
    SET(NJLI_ASSIMP_POSTFIX "d")
    SET(NJLI_FMOD_POSTFIX "L")
ENDIF()

SET( NJLI_BINARY_EXTENSION "" )
IF( ${NJLI_BUILD_PLATFORM} STREQUAL "emscripten" )
    SET( NJLI_BINARY_EXTENSION ".js" )
ENDIF()


SET( NJLI_FMOD_EXTENSION "a")
IF( ${NJLI_FMOD_EXTENSION} EQUAL macOS )
    SET( NJLI_FMOD_EXTENSION "dylib" )
ELSEIF( ${NJLI_FMOD_EXTENSION} EQUAL android )
    SET( NJLI_FMOD_EXTENSION "so" )
ENDIF()

option ( GENERATE_DOCUMENTATION "Whether to build the documentation or not" OFF )
option ( GENERATE_LIB "Whether to build the documentation or not" ON )

macro(BUILD_DOCUMENTATION)
    FIND_PACKAGE(Doxygen)
    IF(DOXYGEN_FOUND)
        CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake.in/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
        ADD_CUSTOM_TARGET(doc ALL
            ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/cmake.in
            COMMENT "Generating API documentation with Doxygen" VERBATIM
            )
        INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/cmake.in/docbook DESTINATION ${CMAKE_INSTALL_DOCDIR})
        INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/cmake.in/html DESTINATION ${CMAKE_INSTALL_DOCDIR})
        INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/cmake.in/latex DESTINATION ${CMAKE_INSTALL_DOCDIR})
        INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/cmake.in/rtf DESTINATION ${CMAKE_INSTALL_DOCDIR})
        INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/cmake.in/xml DESTINATION ${CMAKE_INSTALL_DOCDIR})
    ENDIF(DOXYGEN_FOUND)

    ADD_CUSTOM_TARGET(luadoc ALL
        ldoc ${CMAKE_CURRENT_SOURCE_DIR}/cmake.in/ldoc.in/
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        COMMENT "Generating API documentation with LDoc" VERBATIM
        )
    INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/ldoc DESTINATION ${CMAKE_INSTALL_DOCDIR})

    SET(NJLIGameEngine_TESTFILES
        ${CMAKE_SOURCE_DIR}/cmake.in/Tests.in/lua/njli_test.lua
        )
    INSTALL(FILES ${NJLIGameEngine_TESTFILES} DESTINATION ${CMAKE_INSTALL_TESTDIR})

    SET(NJLIGameEngine_DATAFILES
        ${CMAKE_SOURCE_DIR}/cmake.in/DoxyFiles.in/images/logo.png
        )
    INSTALL(FILES ${NJLIGameEngine_DATAFILES} DESTINATION ${CMAKE_INSTALL_DATADIR})
endmacro()


macro( BUILD_PLATFORM )

    # The version number.
    SET (NJLIGameEngine_VERSION_MAJOR 1)
    SET (NJLIGameEngine_VERSION_MINOR 0)

    # configure a header file to pass some of the CMake settings
    # to the source code
    CONFIGURE_FILE (
        "${CMAKE_SOURCE_DIR}/cmake.in/NJLIGameEngineConfig.h.in"
        "${NJLI_SOURCE_DIRECTORY}/njli/generated/NJLIGameEngineConfig.h"
        )

    INCLUDE_DIRECTORIES( ${NJLI_SOURCE_DIRECTORY} )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/assimp )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3 )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/Bullet2FileLoader )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/Bullet2FileLoader/autogenerated )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/Bullet3Collision )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/Bullet3Collision/BroadPhaseCollision )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/Bullet3Collision/BroadPhaseCollision/shared )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/Bullet3Collision/NarrowPhaseCollision )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/Bullet3Collision/NarrowPhaseCollision/shared )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/Bullet3Common )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/Bullet3Common/shared )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/Bullet3Dynamics )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/Bullet3Dynamics/ConstraintSolver )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/Bullet3Dynamics/shared )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/Bullet3Geometry )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/Bullet3OpenCL )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/Bullet3OpenCL/BroadphaseCollision )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/Bullet3OpenCL/BroadphaseCollision/kernels )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/Bullet3OpenCL/Initialize )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/Bullet3OpenCL/NarrowphaseCollision )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/Bullet3OpenCL/NarrowphaseCollision/kernels )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/Bullet3OpenCL/ParallelPrimitives )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/Bullet3OpenCL/ParallelPrimitives/kernels )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/Bullet3OpenCL/Raycast )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/Bullet3OpenCL/Raycast/kernels )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/Bullet3OpenCL/RigidBody )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/Bullet3OpenCL/RigidBody/kernels )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/BulletCollision )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/BulletCollision/BroadphaseCollision )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/BulletCollision/CollisionDispatch )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/BulletCollision/CollisionShapes )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/BulletCollision/Gimpact )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/BulletCollision/NarrowPhaseCollision )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/BulletDynamics )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/BulletDynamics/Character )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/BulletDynamics/ConstraintSolver )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/BulletDynamics/Dynamics )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/BulletDynamics/Featherstone )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/BulletDynamics/MLCPSolvers )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/BulletDynamics/Vehicle )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/BulletFileLoader )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/BulletFileLoader/autogenerated )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/BulletInverseDynamics )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/BulletInverseDynamics/details )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/BulletSoftBody )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/BulletWorldImporter )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/BulletXmlWorldImporter )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/ConvexDecomposition )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/GIMPACTUtils )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/HACD )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/InverseDynamics )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/bullet3/LinearMath )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/glm )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/fmod/include )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/SDL/include )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/imgui )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/ImGuizmo )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/jsoncpp )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/nanovg )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/stb )
    INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/include/tinyxml2 )
    INCLUDE_DIRECTORIES( ${NJLI_SOURCE_DIRECTORY}/bullet )
    INCLUDE_DIRECTORIES( ${NJLI_SOURCE_DIRECTORY}/lua/src )
    INCLUDE_DIRECTORIES( ${NJLI_SOURCE_DIRECTORY}/lua/exts )
    INCLUDE_DIRECTORIES( ${NJLI_SOURCE_DIRECTORY}/lua/exts/cjson )
    INCLUDE_DIRECTORIES( ${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket )
    INCLUDE_DIRECTORIES( ${NJLI_SOURCE_DIRECTORY}/njli )
    INCLUDE_DIRECTORIES( ${NJLI_SOURCE_DIRECTORY}/njli/builders )
    INCLUDE_DIRECTORIES( ${NJLI_SOURCE_DIRECTORY}/njli/builders/graphics )
    INCLUDE_DIRECTORIES( ${NJLI_SOURCE_DIRECTORY}/njli/builders/physics )
    INCLUDE_DIRECTORIES( ${NJLI_SOURCE_DIRECTORY}/njli/builders/physics/body )
    INCLUDE_DIRECTORIES( ${NJLI_SOURCE_DIRECTORY}/njli/builders/physics/constraint )
    INCLUDE_DIRECTORIES( ${NJLI_SOURCE_DIRECTORY}/njli/builders/physics/shape )
    INCLUDE_DIRECTORIES( ${NJLI_SOURCE_DIRECTORY}/njli/builders/platform )
    INCLUDE_DIRECTORIES( ${NJLI_SOURCE_DIRECTORY}/njli/builders/sound )
    INCLUDE_DIRECTORIES( ${NJLI_SOURCE_DIRECTORY}/njli/builders/steering )
    INCLUDE_DIRECTORIES( ${NJLI_SOURCE_DIRECTORY}/njli/builders/steering/behavior )
    INCLUDE_DIRECTORIES( ${NJLI_SOURCE_DIRECTORY}/njli/generated )
    INCLUDE_DIRECTORIES( ${NJLI_SOURCE_DIRECTORY}/njli/generated/swig )
    INCLUDE_DIRECTORIES( ${NJLI_SOURCE_DIRECTORY}/njli/generated/swig/lua )
    INCLUDE_DIRECTORIES( ${NJLI_SOURCE_DIRECTORY}/njli/graphics )
    INCLUDE_DIRECTORIES( ${NJLI_SOURCE_DIRECTORY}/njli/graphics/${NJLI_GRAPHICS_PLATFORM} )
    INCLUDE_DIRECTORIES( ${NJLI_SOURCE_DIRECTORY}/njli/physics )
    INCLUDE_DIRECTORIES( ${NJLI_SOURCE_DIRECTORY}/njli/physics/body )
    INCLUDE_DIRECTORIES( ${NJLI_SOURCE_DIRECTORY}/njli/physics/constraint )
    INCLUDE_DIRECTORIES( ${NJLI_SOURCE_DIRECTORY}/njli/physics/shape )
    INCLUDE_DIRECTORIES( ${NJLI_SOURCE_DIRECTORY}/njli/sound )
    INCLUDE_DIRECTORIES( ${NJLI_SOURCE_DIRECTORY}/njli/steering )
    INCLUDE_DIRECTORIES( ${NJLI_SOURCE_DIRECTORY}/njli/steering/behavior )
    INCLUDE_DIRECTORIES( ${NJLI_SOURCE_DIRECTORY}/njli/platform )
    INCLUDE_DIRECTORIES( ${NJLI_SOURCE_DIRECTORY}/njli/platform/${NJLI_BUILD_PLATFORM} )

    IF( ${NJLI_BUILD_PLATFORM} STREQUAL "appletvos" )
        INCLUDE_DIRECTORIES( /Applications/Xcode.app/Contents/Developer/Platforms/AppleTVOS.platform/Developer/SDKs/AppleTVOS.sdk/System/Library/Frameworks )
    ELSEIF( ${NJLI_BUILD_PLATFORM} STREQUAL "ios" )
        INCLUDE_DIRECTORIES( /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/System/Library/Frameworks )
    ELSEIF( ${NJLI_BUILD_PLATFORM} STREQUAL "macOS" )
        INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/Native_SDK/Builds/Include )
        INCLUDE_DIRECTORIES( /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks )
    ELSEIF( ${NJLI_BUILD_PLATFORM} STREQUAL "emscripten" )
        INCLUDE_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/Native_SDK/Builds/Include )
        INCLUDE_DIRECTORIES( /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks )
    ELSEIF( ${NJLI_BUILD_PLATFORM} STREQUAL "android" )
        INCLUDE_DIRECTORIES( /Users/jamesfolk/Library/Android/sdk/ndk-bundle/platforms/android-24/arch-arm/usr/include )
    ENDIF()

    SET(NJLIGameEngine_PUBLIC_HDRS
        ${NJLI_SOURCE_DIRECTORY}/njli/platform/Game.h 
        )

    FILE(GLOB Lua_SRCS
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/lualoadexts.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/lualoadexts.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/auxiliar.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/auxiliar.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/buffer.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/buffer.h"
        #"${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/compat.c"
        #"${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/compat.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/except.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/except.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/inet.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/inet.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/io.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/io.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/luasocket.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/luasocket.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/mime.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/mime.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/options.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/options.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/pierror.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/select.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/select.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/serial.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/socket.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/tcp.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/tcp.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/timeout.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/timeout.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/udp.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/udp.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/unix.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/unix.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/unixdgram.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/unixdgram.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/unixstream.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/unixstream.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/usocket.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/usocket.h"
        #"${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/wsocket.c"
        #"${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocket/wsocket.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocketscripts.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/exts/luasocketscripts.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lapi.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lapi.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lauxlib.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lauxlib.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lbaselib.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lbitlib.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lcode.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lcode.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lcorolib.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lctype.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lctype.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/ldblib.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/ldebug.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/ldebug.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/ldo.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/ldo.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/ldump.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lfunc.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lfunc.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lgc.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lgc.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/linit.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/liolib.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/llex.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/llex.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/llimits.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lmathlib.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lmem.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lmem.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/loadlib.c"
        #"${NJLI_SOURCE_DIRECTORY}/lua/src/loadlib_rel.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lobject.c"
        #"${NJLI_SOURCE_DIRECTORY}/lua/src/lobject.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lopcodes.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lopcodes.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/loslib.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lparser.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lparser.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lprefix.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lstate.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lstate.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lstring.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lstring.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lstrlib.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/ltable.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/ltable.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/ltablib.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/ltm.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/ltm.h"
        #"${NJLI_SOURCE_DIRECTORY}/lua/src/lua.c"
        #"${NJLI_SOURCE_DIRECTORY}/lua/src/lua.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lua.hpp"
        #"${NJLI_SOURCE_DIRECTORY}/lua/src/lua.rc"
        #"${NJLI_SOURCE_DIRECTORY}/lua/src/luac.c"
        #"${NJLI_SOURCE_DIRECTORY}/lua/src/luac.rc"
        #"${NJLI_SOURCE_DIRECTORY}/lua/src/luaconf.h.in"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/luaconf.h"
        #"${NJLI_SOURCE_DIRECTORY}/lua/src/lualib.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lundump.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lundump.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lutf8lib.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lvm.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lvm.h"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lzio.c"
        "${NJLI_SOURCE_DIRECTORY}/lua/src/lzio.h"
        #"${NJLI_SOURCE_DIRECTORY}/lua/src/wmain.c"
        )

    FILE(GLOB NJLIGameEngineBase_SRCS
        ${NJLI_SOURCE_DIRECTORY}/njli/platform/*.h
        ${NJLI_SOURCE_DIRECTORY}/njli/platform/*.cpp
        ${NJLI_SOURCE_DIRECTORY}/njli/platform/${NJLI_BUILD_PLATFORM}/*.h
        ${NJLI_SOURCE_DIRECTORY}/njli/platform/${NJLI_BUILD_PLATFORM}/*.mm
        ${NJLI_SOURCE_DIRECTORY}/njli/platform/${NJLI_BUILD_PLATFORM}/*.cpp
        ${NJLI_SOURCE_DIRECTORY}/bullet/*.h
        ${NJLI_SOURCE_DIRECTORY}/bullet/*.cpp
        ${NJLI_SOURCE_DIRECTORY}/njli/*.h
        ${NJLI_SOURCE_DIRECTORY}/njli/*.cpp
        ${NJLI_SOURCE_DIRECTORY}/njli/builders/*.h
        ${NJLI_SOURCE_DIRECTORY}/njli/builders/*.cpp
        ${NJLI_SOURCE_DIRECTORY}/njli/builders/graphics/*.h
        ${NJLI_SOURCE_DIRECTORY}/njli/builders/graphics/*.cpp
        ${NJLI_SOURCE_DIRECTORY}/njli/builders/physics/*.h
        ${NJLI_SOURCE_DIRECTORY}/njli/builders/physics/*.cpp
        ${NJLI_SOURCE_DIRECTORY}/njli/builders/physics/body/*.h
        ${NJLI_SOURCE_DIRECTORY}/njli/builders/physics/body/*.cpp
        ${NJLI_SOURCE_DIRECTORY}/njli/builders/physics/constraint/*.h
        ${NJLI_SOURCE_DIRECTORY}/njli/builders/physics/constraint/*.cpp
        ${NJLI_SOURCE_DIRECTORY}/njli/builders/physics/shape/*.h
        ${NJLI_SOURCE_DIRECTORY}/njli/builders/physics/shape/*.cpp
        ${NJLI_SOURCE_DIRECTORY}/njli/builders/platform/*.h
        ${NJLI_SOURCE_DIRECTORY}/njli/builders/platform/*.cpp
        ${NJLI_SOURCE_DIRECTORY}/njli/builders/sound/*.h
        ${NJLI_SOURCE_DIRECTORY}/njli/builders/sound/*.cpp
        ${NJLI_SOURCE_DIRECTORY}/njli/builders/steering/*.h
        ${NJLI_SOURCE_DIRECTORY}/njli/builders/steering/*.cpp
        ${NJLI_SOURCE_DIRECTORY}/njli/builders/steering/behavior/*.h
        ${NJLI_SOURCE_DIRECTORY}/njli/builders/steering/behavior/*.cpp
        ${NJLI_SOURCE_DIRECTORY}/njli/generated/*.h
        ${NJLI_SOURCE_DIRECTORY}/njli/generated/*.cpp
        ${NJLI_SOURCE_DIRECTORY}/njli/generated/swig/*.h
        ${NJLI_SOURCE_DIRECTORY}/njli/generated/swig/*.cpp
        ${NJLI_SOURCE_DIRECTORY}/njli/graphics/*.h
        ${NJLI_SOURCE_DIRECTORY}/njli/graphics/*.cpp
        ${NJLI_SOURCE_DIRECTORY}/njli/graphics/${NJLI_GRAPHICS_PLATFORM}/*.h
        ${NJLI_SOURCE_DIRECTORY}/njli/graphics/${NJLI_GRAPHICS_PLATFORM}/*.cpp
        ${NJLI_SOURCE_DIRECTORY}/njli/physics/*.h
        ${NJLI_SOURCE_DIRECTORY}/njli/physics/*.cpp
        ${NJLI_SOURCE_DIRECTORY}/njli/physics/body/*.h
        ${NJLI_SOURCE_DIRECTORY}/njli/physics/body/*.cpp
        ${NJLI_SOURCE_DIRECTORY}/njli/physics/constraint/*.h
        ${NJLI_SOURCE_DIRECTORY}/njli/physics/constraint/*.cpp
        ${NJLI_SOURCE_DIRECTORY}/njli/physics/shape/*.h
        ${NJLI_SOURCE_DIRECTORY}/njli/physics/shape/*.cpp
        ${NJLI_SOURCE_DIRECTORY}/njli/sound/*.h
        ${NJLI_SOURCE_DIRECTORY}/njli/sound/*.cpp
        ${NJLI_SOURCE_DIRECTORY}/njli/sound/${NJLI_SOUND_PLATFORM}/*.h
        ${NJLI_SOURCE_DIRECTORY}/njli/sound/${NJLI_SOUND_PLATFORM}/*.cpp
        ${NJLI_SOURCE_DIRECTORY}/njli/steering/*.h
        ${NJLI_SOURCE_DIRECTORY}/njli/steering/*.cpp
        ${NJLI_SOURCE_DIRECTORY}/njli/steering/behavior/*.h
        ${NJLI_SOURCE_DIRECTORY}/njli/steering/behavior/*.cpp
        )

    FILE(GLOB NJLIGameEngine_SRCS
        ${NJLIGameEngineBase_SRCS}
        ${Lua_SRCS} 
        )

    LINK_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/assimp/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib )
    IF( ${CMAKE_BUILD_TYPE} STREQUAL "Debug" )
        LINK_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/fmod/lib/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE} )
        LINK_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/SDL/lib/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE} )
    ELSE()
        LINK_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/fmod/lib/${NJLI_BUILD_DIR}/Release )
        LINK_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/SDL/lib/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE} )
    ENDIF()
    LINK_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/imgui/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE} ) 
    LINK_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/ImGuizmo/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE} ) 
    LINK_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/jsoncpp/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE} ) 
    LINK_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/nanovg/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE} ) 
    LINK_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/stb/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE} ) 
    LINK_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/tinyxml2/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE} )
    LINK_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib ) 
    IF( ${NJLI_BUILD_PLATFORM} STREQUAL "appletvos" )
    ELSEIF( ${NJLI_BUILD_PLATFORM} STREQUAL "ios" )
    ELSEIF( ${NJLI_BUILD_PLATFORM} STREQUAL "macOS" )
        LINK_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/Native_SDK/Builds/OSX/x86/Lib/ )
    ELSEIF( ${NJLI_BUILD_PLATFORM} STREQUAL "emscripten" )
        LINK_DIRECTORIES( ${NJLI_THIRDPARTY_DIRECTORY}/Native_SDK/Builds/OSX/x86/Lib/ )
    ELSEIF( ${NJLI_BUILD_PLATFORM} STREQUAL "android" )
        LINK_DIRECTORIES( /Users/jamesfolk/Library/Android/sdk/ndk-bundle/platforms/android-24/arch-arm/usr/lib )
    ENDIF()

    LINK_DIRECTORIES(
        ${NJLI_SOURCE_DIRECTORY}/bullet
        ${NJLI_SOURCE_DIRECTORY}/njli
        ${NJLI_SOURCE_DIRECTORY}/njli/builders
        ${NJLI_SOURCE_DIRECTORY}/njli/builders/graphics
        ${NJLI_SOURCE_DIRECTORY}/njli/builders/physics
        ${NJLI_SOURCE_DIRECTORY}/njli/builders/physics/body
        ${NJLI_SOURCE_DIRECTORY}/njli/builders/physics/constraint
        ${NJLI_SOURCE_DIRECTORY}/njli/builders/physics/shape
        ${NJLI_SOURCE_DIRECTORY}/njli/builders/platform
        ${NJLI_SOURCE_DIRECTORY}/njli/builders/sound
        ${NJLI_SOURCE_DIRECTORY}/njli/builders/steering
        ${NJLI_SOURCE_DIRECTORY}/njli/builders/steering/behavior
        ${NJLI_SOURCE_DIRECTORY}/njli/graphics
        ${NJLI_SOURCE_DIRECTORY}/njli/graphics/${NJLI_GRAPHICS_PLATFORM}
        ${NJLI_SOURCE_DIRECTORY}/njli/physics
        ${NJLI_SOURCE_DIRECTORY}/njli/physics/body
        ${NJLI_SOURCE_DIRECTORY}/njli/physics/constraint
        ${NJLI_SOURCE_DIRECTORY}/njli/physics/shape
        ${NJLI_SOURCE_DIRECTORY}/njli/sound
        ${NJLI_SOURCE_DIRECTORY}/njli/sound/${NJLI_SOUND_PLATFORM}
        ${NJLI_SOURCE_DIRECTORY}/njli/steering
        ${NJLI_SOURCE_DIRECTORY}/njli/steering/behavior
        ${NJLI_SOURCE_DIRECTORY}/njli/platform
        ${NJLI_SOURCE_DIRECTORY}/njli/platform/${NJLI_BUILD_PLATFORM}
        )
    
    FILE(GLOB NJLIGameEngine_LBY
        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/assimp/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libassimp${NJLI_ASSIMP_POSTFIX}.a 
        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBullet2FileLoader.a 
        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBullet3Collision.a 
        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBullet3Common.a 
        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBullet3Dynamics.a 
        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBullet3Geometry.a 
        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBullet3OpenCL_clew.a 
        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBulletCollision.a 
        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBulletDynamics.a 
        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBulletFileLoader.a 
        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBulletInverseDynamics.a 
        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBulletInverseDynamicsUtils.a 
        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBulletSoftBody.a 
        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBulletWorldImporter.a 
        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libBulletXmlWorldImporter.a 
        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libConvexDecomposition.a 
        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libGIMPACTUtils.a 
        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libHACD.a 
        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/bullet3/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/lib/libLinearMath.a 
        IF( ${CMAKE_BUILD_TYPE} STREQUAL "Debug" )
            ${NJLI_THIRDPARTY_DIRECTORY}/fmod/lib/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/libfmod.${NJLI_FMOD_EXTENSION}
            ${NJLI_THIRDPARTY_DIRECTORY}/SDL/lib/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/libSDL2.a
        ELSE()
            ${NJLI_THIRDPARTY_DIRECTORY}/fmod/lib/${NJLI_BUILD_DIR}/Release/libfmod.${NJLI_FMOD_EXTENSION}
            ${NJLI_THIRDPARTY_DIRECTORY}/SDL/lib/${NJLI_BUILD_DIR}/Release/libSDL2.a
        ENDIF()
        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/imgui/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/libimgui.a 
        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/ImGuizmo/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/libImGuizmo.a 
        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/jsoncpp/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/libjsoncpp.a 
        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/nanovg/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/libnanovg.a 
        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/stb/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/libstb.a 
        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/tinyxml2/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/libtinyxml2.a 
        )


    IF( ${NJLI_BUILD_PLATFORM} STREQUAL "appletvos" )
        set (IOS_SDK_ROOT "/Applications/Xcode.app/Contents/Developer/Platforms/AppleTVOS.platform/Developer/SDKs/AppleTVOS.sdk")

        # Set the sysroot default to the most recent SDK
        set (CMAKE_OSX_SYSROOT ${IOS_SDK_ROOT} CACHE PATH "Sysroot used for iOS support")

        # set the architecture for iOS - this env var sets armv6,armv7 and appears to be XCode's standard. The other found is ARCHS_UNIVERSAL_IPHONE_OS but that is armv7 only
        set (CMAKE_OSX_ARCHITECTURES "${IOS_ARCH}" CACHE string "Build architecture for iOS")

        # set up the default search directories for frameworks
        set (CMAKE_SYSTEM_FRAMEWORK_PATH ${IOS_SDK_ROOT}/Developer/Library/Frameworks)

        #http://stackoverflow.com/questions/17070101/why-i-cannot-link-the-mac-framework-file-with-cmake
        SET(EXTRA_PLATFORM_LIBS "-framework Foundation -framework OpenGLES -framework AudioToolbox -framework AVFoundation -lfmod")

        SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility=hidden" )
    ELSEIF( ${NJLI_BUILD_PLATFORM} STREQUAL "ios" )
        set (IOS_SDK_ROOT "/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS10.2.sdk")

        # Set the sysroot default to the most recent SDK
        set (CMAKE_OSX_SYSROOT ${IOS_SDK_ROOT} CACHE PATH "Sysroot used for iOS support")

        # set the architecture for iOS - this env var sets armv6,armv7 and appears to be XCode's standard. The other found is ARCHS_UNIVERSAL_IPHONE_OS but that is armv7 only
        set (CMAKE_OSX_ARCHITECTURES "${IOS_ARCH}" CACHE string "Build architecture for iOS")

        # set up the default search directories for frameworks
        set (CMAKE_SYSTEM_FRAMEWORK_PATH ${IOS_SDK_ROOT}/Developer/Library/Frameworks)

        #http://stackoverflow.com/questions/17070101/why-i-cannot-link-the-mac-framework-file-with-cmake
        SET(EXTRA_PLATFORM_LIBS "-framework Foundation -framework OpenGLES -framework AudioToolbox -framework AVFoundation -lfmod")

        SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility=hidden" )

    ELSEIF( ${NJLI_BUILD_PLATFORM} STREQUAL "macOS" )
        set (IOS_SDK_ROOT "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk")

        # Set the sysroot default to the most recent SDK
        set (CMAKE_OSX_SYSROOT ${IOS_SDK_ROOT} CACHE PATH "Sysroot used for iOS support")

        # set the architecture for iOS - this env var sets armv6,armv7 and appears to be XCode's standard. The other found is ARCHS_UNIVERSAL_IPHONE_OS but that is armv7 only
        set (CMAKE_OSX_ARCHITECTURES "${IOS_ARCH}" CACHE string "Build architecture for iOS")

        # set up the default search directories for frameworks
        set (CMAKE_SYSTEM_FRAMEWORK_PATH ${IOS_SDK_ROOT}/Developer/Library/Frameworks)

        #http://stackoverflow.com/questions/17070101/why-i-cannot-link-the-mac-framework-file-with-cmake
        SET(EXTRA_PLATFORM_LIBS "-framework Foundation -framework AudioToolbox -framework AVFoundation -lfmod -lGLESv2")

        SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DGL_GLEXT_PROTOTYPES -fvisibility=hidden" )
        SET( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DGL_GLEXT_PROTOTYPES" )
        #SET( CMAKE_EXE_LINKER_FLAGS  "${CMAKE_EXE_LINKER_FLAGS} -framework Foundation -framework AudioToolbox -framework AVFoundation -lfmod -lGLESv2" )

        FILE(GLOB NJLIGameEngine_LBY
            ${NJLIGameEngine_LBY}
            ${NJLI_THIRDPARTY_DIRECTORY}/Native_SDK/Builds/OSX/x86/Lib/libGLESv2.dylib
            ${NJLI_THIRDPARTY_DIRECTORY}/Native_SDK/Builds/OSX/x86/Lib/libEGL.dylib
            )

    ELSEIF( ${NJLI_BUILD_PLATFORM} STREQUAL "emscripten" )
        FILE(GLOB NJLIGameEngine_LBY
            ${NJLIGameEngine_LBY}
            ${NJLI_THIRDPARTY_DIRECTORY}/Native_SDK/Builds/OSX/x86/Lib/libGLESv2.dylib 
            ${NJLI_THIRDPARTY_DIRECTORY}/Native_SDK/Builds/OSX/x86/Lib/libEGL.dylib
            )
        SET(EXTRA_PLATFORM_LIBS "-lGLESv2 -lEGL")
    ELSEIF( ${NJLI_BUILD_PLATFORM} STREQUAL "android" )
        SET( EXTRA_PLATFORM_LIBS "-lfmod -ldl -lGLESv2 -llog -landroid -lm -lc -lEGL -lstdc++")
        SET( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DGL_GLEXT_PROTOTYPES" )
    ENDIF()


    ADD_LIBRARY( libnjli_static_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} STATIC ${NJLIGameEngine_SRCS} )
    SET_TARGET_PROPERTIES( libnjli_static_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} PROPERTIES OUTPUT_NAME libnjli )
    SET_TARGET_PROPERTIES( libnjli_static_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} PROPERTIES PREFIX "")
    TARGET_LINK_LIBRARIES( libnjli_static_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLIGameEngine_LBY} ${EXTRA_PLATFORM_LIBS} )
    INSTALL( TARGETS libnjli_static_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} DESTINATION lib/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE} )

    ADD_LIBRARY( libnjli_shared_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} SHARED ${NJLIGameEngine_SRCS} )
    SET_TARGET_PROPERTIES( libnjli_shared_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} PROPERTIES OUTPUT_NAME libnjli )
    SET_TARGET_PROPERTIES( libnjli_shared_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} PROPERTIES PREFIX "")
    TARGET_LINK_LIBRARIES( libnjli_shared_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${EXTRA_PLATFORM_LIBS} ${NJLIGameEngine_LBY} )
    INSTALL( TARGETS libnjli_shared_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} DESTINATION lib/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE} )

    ADD_LIBRARY( libnjli_lua_module_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} MODULE ${NJLIGameEngine_SRCS} )
    SET_TARGET_PROPERTIES( libnjli_lua_module_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} PROPERTIES OUTPUT_NAME njli )
    SET_TARGET_PROPERTIES( libnjli_lua_module_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} PROPERTIES PREFIX "")
    SET_TARGET_PROPERTIES( libnjli_lua_module_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} PROPERTIES POSTFIX ".so")
    TARGET_LINK_LIBRARIES( libnjli_lua_module_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLIGameEngine_LBY} ${EXTRA_PLATFORM_LIBS} )
    INSTALL( TARGETS libnjli_lua_module_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} DESTINATION module/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE} )

    IF( ${NJLI_BUILD_PLATFORM} STREQUAL "appletvos" )
    ELSEIF( ${NJLI_BUILD_PLATFORM} STREQUAL "ios" )

        SET( CMAKE_OSX_SYSROOT "iphoneos" )
        SET( CMAKE_XCODE_EFFECTIVE_PLATFORMS "-iphoneos;-iphonesimulator" )
        SET( CMAKE_DEBUG_POSTFIX d )

        SET( IOS_ICONS 
            "${CMAKE_CURRENT_SOURCE_DIR}/cmake.in/Platform.in/ios/Icon.png" 
            )
        SET( IOS_IMAGES 
            "${CMAKE_CURRENT_SOURCE_DIR}/cmake.in/Platform.in/ios/Default.png" 
            "${CMAKE_CURRENT_SOURCE_DIR}/cmake.in/Platform.in/ios/Default-568h@2x.png" 
            )

        SET( IOS_RESOURCES ${IOS_ICONS} ${IOS_IMAGES} )
        
        FILE(GLOB NJLIGameEngine_SRCS_project
            ${NJLIGameEngine_SRCS}
            ${NJLI_SOURCE_DIRECTORY}/njli/platform/main.c
            )
        
        ADD_EXECUTABLE( njli_source_project_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${NJLIGameEngine_SRCS_project} ${IOS_RESOURCES} )
        SET_TARGET_PROPERTIES( njli_source_project_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} PROPERTIES OUTPUT_NAME njli_source_project )
        SET_TARGET_PROPERTIES( njli_source_project_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} PROPERTIES PREFIX "")
        TARGET_LINK_LIBRARIES( njli_source_project_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM} ${EXTRA_PLATFORM_LIBS} ${NJLIGameEngine_LBY} )

        SET_TARGET_PROPERTIES (
            njli_source_project_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM}
            PROPERTIES
            MACOSX_BUNDLE YES
            MACOSX_BUNDLE_INFO_PLIST
            "${CMAKE_CURRENT_SOURCE_DIR}/cmake.in/Platform.in/ios/Info.plist"
            XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY "iPhone Developer"
            XCODE_ATTRIBUTE_TARGETED_DEVICE_FAMILY "1,2"
            XCODE_ATTRIBUTE_CLANG_ENABLE_OBJC_ARC YES
            XCODE_ATTRIBUTE_INSTALL_PATH "${CMAKE_BINARY_DIR}/ProductRelease"
            XCODE_ATTRIBUTE_COMBINE_HIDPI_IMAGES "NO"
            RESOURCE "${IOS_RESOURCES}"
            )
        SET_TARGET_PROPERTIES(
            njli_source_project_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM}
            PROPERTIES
            XCODE_ATTRIBUTE_PRODUCT_NAME
            "njli_source_project_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM}"
            XCODE_ATTRIBUTE_BUNDLE_IDENTIFIER
            ${com.njligames.engine.source}
            )
        SET_TARGET_PROPERTIES(
            njli_source_project_${CMAKE_BUILD_TYPE}_${BUILD_COUNTER}_${NJLI_BUILD_PLATFORM}
            "-framework CoreGraphics"
            "-framework Foundation"
            "-framework UIKit"
            )
    ELSEIF( ${NJLI_BUILD_PLATFORM} STREQUAL "macOS" )
    ELSEIF( ${NJLI_BUILD_PLATFORM} STREQUAL "emscripten" )
    ELSEIF( ${NJLI_BUILD_PLATFORM} STREQUAL "android" )
    ENDIF()

    SET(Binary_FILES
        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/lua/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/bin/lua${NJLI_BINARY_EXTENSION}
        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/lua/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/bin/luac${NJLI_BINARY_EXTENSION}
        ${NJLI_THIRDPARTY_DIRECTORY}/BUILD/lib/assimp/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE}/bin/assimp${NJLI_ASSIMP_POSTFIX}${NJLI_BINARY_EXTENSION}
        )
    INSTALL(PROGRAMS ${Binary_FILES} DESTINATION bin/thirdparty/${NJLI_BUILD_DIR}/${CMAKE_BUILD_TYPE} )

    INSTALL(FILES ${NJLIGameEngine_PUBLIC_HDRS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

    MATH(EXPR BUILD_COUNTER "${BUILD_COUNTER}+1")
endmacro()

IF(GENERATE_LIB)

    #EXECUTE_PROCESS(COMMAND ./swig_lua.sh ${CMAKE_CURRENT_BINARY_DIR}
    #    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    #    RESULT_VARIABLE swig_result
    #    OUTPUT_VARIABLE swig_ver)
    #INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/lnjli.xml DESTINATION ${CMAKE_INSTALL_DATADIR}/swig/lua)
    #INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/lbullet.xml DESTINATION ${CMAKE_INSTALL_DATADIR}/swig/lua)
                                            
    #ADD_CUSTOM_COMMAND(OUTPUT ${NJLI_SOURCE_DIRECTORY}/njli/generated/swig/lua/lnjli.cpp #${NJLI_SOURCE_DIRECTORY}/njli/generated/swig/lua/lbullet.cpp
    #    COMMAND ./swig_lua.sh ${CMAKE_CURRENT_BINARY_DIR}
    #    DEPENDS ${NJLIGameEngine_SRCS}
    #    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    #    RESULT_VARIABLE swig_result
    #    OUTPUT_VARIABLE swig_ver
    #    )
    #MESSAGE("${swig_result}")
    #SET_SOURCE_FILES_PROPERTIES( ${NJLI_SOURCE_DIRECTORY}/njli/generated/swig/lua/lnjli.cpp PROPERTIES GENERATED TRUE )
    #SET_SOURCE_FILES_PROPERTIES( ${NJLI_SOURCE_DIRECTORY}/njli/generated/swig/lua/lbullet.cpp PROPERTIES GENERATED TRUE )
    #INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/lnjli.xml DESTINATION ${CMAKE_INSTALL_DATADIR}/swig/lua)
    #INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/lbullet.xml DESTINATION ${CMAKE_INSTALL_DATADIR}/swig/lua)
    
    SET( BUILD_COUNTER 1 )

    BUILD_PLATFORM()

ENDIF()

IF(GENERATE_DOCUMENTATION)
    BUILD_DOCUMENTATION()
ENDIF()

# build a CPack driven installer package
include (InstallRequiredSystemLibraries)

SET (CPACK_PACKAGE_DESCRIPTION_SUMMARY "NJLIGameEngine libraries.")
SET (CPACK_PACKAGE_VENDOR "NJLIGames LLC.")
SET (CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/README.md")
SET (CPACK_RESOURCE_FILE_LICENSE  "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")
SET (CPACK_PACKAGE_VERSION_MAJOR "${NJLIGameEngine_VERSION_MAJOR}")
SET (CPACK_PACKAGE_VERSION_MINOR "${NJLIGameEngine_VERSION_MINOR}")
SET (CPACK_PACKAGE_VERSION_PATCH "1")
SET (CPACK_PACKAGE_CONTACT "jamesfolk1@gmail.com" )
SET (CPACK_PACKAGE_INSTALL_DIRECTORY "CMake ${CMake_VERSION_MAJOR}.${CMake_VERSION_MINOR}")


